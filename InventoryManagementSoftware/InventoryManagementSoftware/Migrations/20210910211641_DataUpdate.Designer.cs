// <auto-generated />
using System;
using InventoryManagementSoftware.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryManagementSoftware.Migrations
{
    [DbContext(typeof(IMSContext))]
    [Migration("20210910211641_DataUpdate")]
    partial class DataUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Bosnian_Latin_100_BIN")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryManagementSoftware.Database.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Addresses_CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "8457 Northwest 66th Street"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            Name = "2541 Highway 516 Old Bridge"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            Name = "1305 W Oltorf St # 300"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            Name = "3 University Plaza Dr #400"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            Name = "630 N Montana Ave"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 6,
                            Name = "2500 Monument Rd"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 7,
                            Name = "1645 Beeghley Street"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Leaf & Clay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rampur"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dakota Fleece"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Merrell"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beam Suntory"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.CategoriesBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BrandId" }, "IX_CategoriesBrands_BrandId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_CategoriesBrands_CategoryId");

                    b.ToTable("CategoriesBrands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plants"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Beverage"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clothes"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_Cities_CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Miami"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "Edison"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 4,
                            Name = "Austin"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "Hackensack"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            Name = "Helena"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Jacksonville"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 4,
                            Name = "Hico"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 2,
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Texas"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "IX_Customers_AddressId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            Email = "info@artisanalimports.com",
                            Name = "Artisanal Imports",
                            PhoneNumber = "+1 512-440-0811"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 4,
                            Email = "reach.out@thesgcompanies.com",
                            Name = "Sg Companies",
                            PhoneNumber = "1-201-342-1200"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InventoryId" }, "IX_Departments_InventoryId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InventoryId = 1,
                            Name = "Food & beverages",
                            Size = 40f
                        },
                        new
                        {
                            Id = 2,
                            InventoryId = 1,
                            Name = "Plants and plant products",
                            Size = 26f
                        },
                        new
                        {
                            Id = 3,
                            InventoryId = 2,
                            Name = "Food & beverages",
                            Size = 66f
                        },
                        new
                        {
                            Id = 4,
                            InventoryId = 2,
                            Name = "Clothes & shoes",
                            Size = 41f
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Jmbg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JMBG");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AddressId" }, "IX_Employees_AddressId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Employees_GenderId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AddressId = 7,
                            BirthDate = new DateTime(1977, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Deena",
                            GenderId = 2,
                            IsDeleted = false,
                            Jmbg = "4532522654414",
                            LastName = "Lavender",
                            PhoneNumber = "254-796-6013",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.EmployeeInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeInventories_EmployeeId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_EmployeeInventories_InventoryId");

                    b.ToTable("EmployeeInventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            HireDate = new DateTime(2021, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InventoryId = 1
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.EmployeeSalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeSalaries_EmployeeId");

                    b.ToTable("EmployeeSalaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            StartDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 740.0
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Export", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Exports_CustomerId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Exports_EmployeeId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_Exports_InventoryId");

                    b.ToTable("Exports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            InventoryId = 1
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ExportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ExportId" }, "IX_ExportDetails_ExportId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ExportDetails_ProductId");

                    b.ToTable("ExportDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0.20000000000000001,
                            ExportId = 1,
                            Price = 235.80000000000001,
                            ProductId = 3,
                            Quantity = 5.0
                        },
                        new
                        {
                            Id = 2,
                            Discount = 0.0,
                            ExportId = 1,
                            Price = 54.990000000000002,
                            ProductId = 5,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = 3,
                            Discount = 0.40000000000000002,
                            ExportId = 1,
                            Price = 77.989999999999995,
                            ProductId = 6,
                            Quantity = 1.0
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Import", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Imports_EmployeeId");

                    b.HasIndex(new[] { "InventoryId" }, "IX_Imports_InventoryId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Imports_SupplierId");

                    b.ToTable("Imports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            InventoryId = 1,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            InventoryId = 1,
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ImportDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImportId" }, "IX_ImportDetails_ImportId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ImportDetails_ProductId");

                    b.ToTable("ImportDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0.29999999999999999,
                            ImportId = 1,
                            Price = 288.86000000000001,
                            ProductId = 3,
                            Quantity = 7.0
                        },
                        new
                        {
                            Id = 2,
                            Discount = 0.0,
                            ImportId = 1,
                            Price = 400.0,
                            ProductId = 4,
                            Quantity = 5.0
                        },
                        new
                        {
                            Id = 3,
                            Discount = 0.0,
                            ImportId = 1,
                            Price = 90.0,
                            ProductId = 8,
                            Quantity = 6.0
                        },
                        new
                        {
                            Id = 4,
                            Discount = 0.5,
                            ImportId = 2,
                            Price = 44.0,
                            ProductId = 1,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = 5,
                            Discount = 0.0,
                            ImportId = 2,
                            Price = 15.0,
                            ProductId = 2,
                            Quantity = 3.0
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "IX_Inventories_AddressId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 5,
                            Name = "Helena - MT",
                            PhoneNumber = "+1406-555-0451",
                            Size = 150f
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 6,
                            Name = "Jacksonville - FL",
                            PhoneNumber = "+1904-555-0506",
                            Size = 200f
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryBrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryBrandId" }, "IX_Products_CategoryBrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryBrandId = 1,
                            Description = "Variegated ginger",
                            IsDeleted = false,
                            Name = "Alpinia zerumbet"
                        },
                        new
                        {
                            Id = 2,
                            CategoryBrandId = 1,
                            Description = "Squarrosa dania",
                            IsDeleted = false,
                            Name = "Aphelandra"
                        },
                        new
                        {
                            Id = 3,
                            CategoryBrandId = 2,
                            Description = "Indian single malt whisky",
                            IsDeleted = false,
                            Name = "Rampur Select"
                        },
                        new
                        {
                            Id = 4,
                            CategoryBrandId = 2,
                            Description = "Indian single malt whisky",
                            IsDeleted = false,
                            Name = "Double Cask"
                        },
                        new
                        {
                            Id = 5,
                            CategoryBrandId = 3,
                            Description = "Men's Deluxe Solar Full Zip Fleece Jacket",
                            IsDeleted = false,
                            Name = "Men's jackett"
                        },
                        new
                        {
                            Id = 6,
                            CategoryBrandId = 4,
                            Description = "Women's Alverstone Vent Breathable Suede Leather Hiking Shoes - Taupe",
                            IsDeleted = false,
                            Name = "Women's hiking shoes"
                        },
                        new
                        {
                            Id = 7,
                            CategoryBrandId = 5,
                            Description = "Premium Japanese craft gin",
                            IsDeleted = false,
                            Name = "Roku"
                        },
                        new
                        {
                            Id = 8,
                            CategoryBrandId = 5,
                            Description = "Rum from the island of St. Croix",
                            IsDeleted = false,
                            Name = "Cruzan"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AttributeId" }, "IX_ProductAttributes_AttributeId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductAttributes_ProductId");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductPrices_ProductId");

                    b.ToTable("ProductPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Price = 44.0,
                            ProductId = 1,
                            StartDate = new DateTime(2021, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Price = 15.0,
                            ProductId = 2,
                            StartDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Price = 58.950000000000003,
                            ProductId = 3,
                            StartDate = new DateTime(2021, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Price = 90.0,
                            ProductId = 4,
                            StartDate = new DateTime(2021, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Price = 54.990000000000002,
                            ProductId = 5,
                            StartDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Price = 129.99000000000001,
                            ProductId = 6,
                            StartDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Price = 25.0,
                            ProductId = 7,
                            StartDate = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Price = 15.0,
                            ProductId = 8,
                            StartDate = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductShelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("ShelfId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductShelves_ProductId");

                    b.HasIndex(new[] { "ShelfId" }, "IX_ProductShelves_ShelfId");

                    b.ToTable("ProductShelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 3,
                            Quantity = 20.0,
                            ShelfId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 4,
                            Quantity = 15.0,
                            ShelfId = 1
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            Quantity = 2.0,
                            ShelfId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 7,
                            Quantity = 12.0,
                            ShelfId = 4
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 7,
                            Quantity = 8.0,
                            ShelfId = 5
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 8,
                            Quantity = 10.0,
                            ShelfId = 5
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 5,
                            Quantity = 1.0,
                            ShelfId = 7
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 6,
                            Quantity = 3.0,
                            ShelfId = 8
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Shelf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Shelves_DepartmentId");

                    b.ToTable("Shelves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Name = "001",
                            RowNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Name = "002",
                            RowNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            Name = "001",
                            RowNumber = 1
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 3,
                            Name = "001",
                            RowNumber = 1
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 3,
                            Name = "002",
                            RowNumber = 2
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 4,
                            Name = "001",
                            RowNumber = 1
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 4,
                            Name = "002",
                            RowNumber = 2
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 4,
                            Name = "003",
                            RowNumber = 3
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AddressId" }, "IX_Suppliers_AddressId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "info@foremostco.com",
                            Name = "Foremostco, Inc.",
                            PhoneNumber = "305.592.8986"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "sgworldwideinc@gmail.com",
                            Name = "FSg Worldwide",
                            PhoneNumber = "+1 732-500-6268"
                        });
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1954fd8e-8fe0-48e9-836c-2cdcccf89ef0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "31d72aba-bc66-414c-979b-ed57c9a247b0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8761f6c-a02d-4e48-81da-95585f418954",
                            Email = "admin@ims.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@IMS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUkMFSXrboURChAEJiqUu1pLXzvH61yPUTqsdQk0P+6c4XkL24mAg4uTtrs2BdHsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3a50ebf-5215-4039-9e5e-134405f033a6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8761f6c-a02d-4e48-81da-95585f418954",
                            Email = "deenal@ims.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DEENAL@IMS.COM",
                            NormalizedUserName = "DEENAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJUkMFSXrboURChAEJiqUu1pLXzvH61yPUTqsdQk0P+6c4XkL24mAg4uTtrs2BdHsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3a50ebf-5215-4039-9e5e-134405f033a6",
                            TwoFactorEnabled = false,
                            UserName = "deenal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Address", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.CategoriesBrand", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Brand", "Brand")
                        .WithMany("CategoriesBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Category", "Category")
                        .WithMany("CategoriesBrands")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.City", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Customer", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Department", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Inventory", "Inventory")
                        .WithMany("Departments")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Employee", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.EmployeeInventory", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Employee", "Employee")
                        .WithMany("EmployeeInventories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Inventory", "Inventory")
                        .WithMany("EmployeeInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.EmployeeSalary", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Employee", "Employee")
                        .WithMany("EmployeeSalaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Export", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Customer", "Customer")
                        .WithMany("Exports")
                        .HasForeignKey("CustomerId");

                    b.HasOne("InventoryManagementSoftware.Database.Employee", "Employee")
                        .WithMany("Exports")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("InventoryManagementSoftware.Database.Inventory", "Inventory")
                        .WithMany("Exports")
                        .HasForeignKey("InventoryId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ExportDetail", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Export", "Export")
                        .WithMany("ExportDetails")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Product", "Product")
                        .WithMany("ExportDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Import", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Employee", "Employee")
                        .WithMany("Imports")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("InventoryManagementSoftware.Database.Inventory", "Inventory")
                        .WithMany("Imports")
                        .HasForeignKey("InventoryId");

                    b.HasOne("InventoryManagementSoftware.Database.Supplier", "Supplier")
                        .WithMany("Imports")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Employee");

                    b.Navigation("Inventory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ImportDetail", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Import", "Import")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Product", "Product")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Inventory", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Address", "Address")
                        .WithMany("Inventories")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Notification", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Product", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.CategoriesBrand", "CategoryBrand")
                        .WithMany("Products")
                        .HasForeignKey("CategoryBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryBrand");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductAttribute", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductPrice", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.ProductShelf", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Product", "Product")
                        .WithMany("ProductShelves")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagementSoftware.Database.Shelf", "Shelf")
                        .WithMany("ProductShelves")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shelf");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Shelf", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Department", "Department")
                        .WithMany("Shelves")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Supplier", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.UserNotification", b =>
                {
                    b.HasOne("InventoryManagementSoftware.Database.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<int>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Inventories");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Attribute", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Brand", b =>
                {
                    b.Navigation("CategoriesBrands");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.CategoriesBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Category", b =>
                {
                    b.Navigation("CategoriesBrands");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Customer", b =>
                {
                    b.Navigation("Exports");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Department", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Employee", b =>
                {
                    b.Navigation("EmployeeInventories");

                    b.Navigation("EmployeeSalaries");

                    b.Navigation("Exports");

                    b.Navigation("Imports");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Export", b =>
                {
                    b.Navigation("ExportDetails");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Gender", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Import", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Inventory", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EmployeeInventories");

                    b.Navigation("Exports");

                    b.Navigation("Imports");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Product", b =>
                {
                    b.Navigation("ExportDetails");

                    b.Navigation("ImportDetails");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductShelves");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Shelf", b =>
                {
                    b.Navigation("ProductShelves");
                });

            modelBuilder.Entity("InventoryManagementSoftware.Database.Supplier", b =>
                {
                    b.Navigation("Imports");
                });
#pragma warning restore 612, 618
        }
    }
}
